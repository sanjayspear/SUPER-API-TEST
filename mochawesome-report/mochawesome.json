{
  "stats": {
    "suites": 8,
    "tests": 16,
    "passes": 14,
    "pending": 0,
    "failures": 2,
    "start": "2024-03-14T09:54:05.265Z",
    "end": "2024-03-14T09:54:11.649Z",
    "duration": 6384,
    "testsRegistered": 16,
    "passPercent": 87.5,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "34ba8d92-d946-4b07-85e0-a5efb9db4de3",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 642,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Use an async function if you are using await inside\n   userID = await createRandomUser();",
          "err": {},
          "uuid": "64411c4f-0268-49f7-b746-3b8bb1e16ee0",
          "parentUUID": "34ba8d92-d946-4b07-85e0-a5efb9db4de3",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "09e9e16e-cc86-458e-8887-735fbe4ef3e4",
          "title": "User Posts",
          "fullFile": "C:\\Users\\Administrator\\Documents\\super-api-test\\test\\smoke\\post.js",
          "file": "\\test\\smoke\\post.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "/posts",
              "fullTitle": "User Posts /posts",
              "timedOut": false,
              "duration": 432,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Removed only to allow all tests to run\n       const data = {\n           user_id: userID, // Ensuring 'user_id' is a number\n           title: \"my title\",\n           body: \"my blog post\",\n       };\n       const postRes = await request\n           .post('posts')\n           .set(\"Authorization\", `Bearer ${TOKEN}`)\n           .send(data);\n       //console.log(postRes.body);\n       expect(postRes.body).to.deep.include(data);\n       postId = postRes.body.id;",
              "err": {},
              "uuid": "902c10f4-89c0-4299-b81b-c058676f7cfa",
              "parentUUID": "09e9e16e-cc86-458e-8887-735fbe4ef3e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /posts/:id",
              "fullTitle": "User Posts GET /posts/:id",
              "timedOut": false,
              "duration": 411,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Removed only to allow all tests to run\n       await request\n           .get(`posts/${postId}`)\n           .set(\"Authorization\", `Bearer ${TOKEN}`)\n           .expect(200);",
              "err": {},
              "uuid": "4ca3104a-4ddc-4c7b-a34c-3a12f2efb409",
              "parentUUID": "09e9e16e-cc86-458e-8887-735fbe4ef3e4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "902c10f4-89c0-4299-b81b-c058676f7cfa",
            "4ca3104a-4ddc-4c7b-a34c-3a12f2efb409"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 843,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "0f09faa0-7983-4eef-a008-4fe4f6873544",
          "title": "Negative Tests",
          "fullFile": "C:\\Users\\Administrator\\Documents\\super-api-test\\test\\smoke\\post.js",
          "file": "\\test\\smoke\\post.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "401 Authentication Failed Test-1 (Using Invalid TOKEN :: Approach 1)",
              "fullTitle": "Negative Tests 401 Authentication Failed Test-1 (Using Invalid TOKEN :: Approach 1)",
              "timedOut": false,
              "duration": 381,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data = {\n    user_id: userID, // Ensuring 'user_id' is a number\n    title: \"my title\",\n    body: \"my blog post\",\n};\nconst postRes = await request\n    .post('posts')\n    .set(\"Authorization\", `Bearer ${INVALID_TOKEN}`)\n    .send(data).expect(401);",
              "err": {},
              "uuid": "1afec99a-e557-4338-98a6-ce0e9c69be26",
              "parentUUID": "0f09faa0-7983-4eef-a008-4fe4f6873544",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "401 Authentication Failed Test-2 (WIthout using any token :: Approach 2)",
              "fullTitle": "Negative Tests 401 Authentication Failed Test-2 (WIthout using any token :: Approach 2)",
              "timedOut": false,
              "duration": 404,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data = {\n    user_id: userID, // Ensuring 'user_id' is a number\n    title: \"my title\",\n    body: \"my blog post\",\n};\nconst response = await request\n    .post('posts')\n    .send(data);\n// First, ensure that you've received a response\nexpect(response).to.exist;\n// Check the status code if it's 401 Unauthorized\nexpect(response.statusCode).to.equal(401);\n// Since the message is in the 'text' field, parse it as JSON\nconst responseBody = JSON.parse(response.text);\n// Now, assert that the 'message' field equals \"Authentication failed\"\nexpect(responseBody.message).to.equal(\"Authentication failed\");",
              "err": {},
              "uuid": "9e9dc37d-6996-4002-8fda-34391bd91f88",
              "parentUUID": "0f09faa0-7983-4eef-a008-4fe4f6873544",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 422 Data Validation Failed when user makes post request with invalid data",
              "fullTitle": "Negative Tests Should return 422 Data Validation Failed when user makes post request with invalid data",
              "timedOut": false,
              "duration": 532,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data = {\n    user_id_00: userID, // Ensuring 'user_id' is a number\n    title_00: \"my title\",\n    body_00: \"my blog post\",\n};\nconst response = await request\n    .post('posts')\n    .set(\"Authorization\", `Bearer ${TOKEN}`)\n    .send(data);\n// First, ensure that you've received a response\nexpect(response).to.exist;\n// Check the status code if it's 422 Data vlaidation failed\nexpect(response.statusCode).to.equal(422);",
              "err": {},
              "uuid": "70e9016e-52d3-43ce-bbd1-0852237fd24d",
              "parentUUID": "0f09faa0-7983-4eef-a008-4fe4f6873544",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1afec99a-e557-4338-98a6-ce0e9c69be26",
            "9e9dc37d-6996-4002-8fda-34391bd91f88",
            "70e9016e-52d3-43ce-bbd1-0852237fd24d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1317,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "3c556473-0c45-4b21-9120-8dc731bd3e4b",
          "title": "User API Tests",
          "fullFile": "C:\\Users\\Administrator\\Documents\\super-api-test\\test\\smoke\\users.js",
          "file": "\\test\\smoke\\users.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"User API Tests\"",
              "fullTitle": "User API Tests \"before all\" hook in \"User API Tests\"",
              "timedOut": false,
              "duration": 504,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Fetching users before running tests\nconst response = await request.get(`users?access-token=${TOKEN}`);\nusers = response.body;",
              "err": {},
              "uuid": "6ca32ae1-706d-4052-bb43-5335bce08d5d",
              "parentUUID": "3c556473-0c45-4b21-9120-8dc731bd3e4b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e37752d4-5392-4e92-ac6f-72fbe3f25754",
              "title": "POST",
              "fullFile": "C:\\Users\\Administrator\\Documents\\super-api-test\\test\\smoke\\users.js",
              "file": "\\test\\smoke\\users.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "POST /users/:id :: To create a new user",
                  "fullTitle": "User API Tests POST POST /users/:id :: To create a new user",
                  "timedOut": false,
                  "duration": 431,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n    \"name\": \"Sanjay Y M\",\n    \"email\": `Anvitha.dhruv-${Math.floor(Math.random() * 9999)}@farrell.test`,\n    \"gender\": \"male\",\n    \"status\": \"active\"\n};\nreturn request\n    .post('users')\n    .set(\"Authorization\", `Bearer ${TOKEN}`)\n    .send(data)\n    .then((res) => {\n        userID = res.body.id;\n        console.log(`Newly created user id is: ${userID}`);\n        console.log(res.body);\n        //data.email = 'test@mail.ca';\n        //Assertion comparision: Approach 1 ==> Lengthy\n        /*expect(res.body.email).to.eq(data.email);\n        expect(res.body.status).to.eq(data.status);\n        expect(res.body.gender).to.eq(data.gender);\n        expect(res.body.name).to.eq(data.name);*/\n        //Assertion comparision: Approach 2 ==> Short (Single Line)\n        expect(res.body).to.deep.include(data);\n    });",
                  "err": {},
                  "uuid": "ac3ebcb5-27b3-4c47-8a37-2f1ef5c39267",
                  "parentUUID": "e37752d4-5392-4e92-ac6f-72fbe3f25754",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ac3ebcb5-27b3-4c47-8a37-2f1ef5c39267"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 431,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "1e219cb9-37ed-4d32-a1cd-4812b9f1bc33",
              "title": "GET",
              "fullFile": "C:\\Users\\Administrator\\Documents\\super-api-test\\test\\smoke\\users.js",
              "file": "\\test\\smoke\\users.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "GET /users",
                  "fullTitle": "User API Tests GET GET /users",
                  "timedOut": false,
                  "duration": 435,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.get(`users?access-token=${TOKEN}`).end((err, res) => {\n    expect(res.body).to.not.be.empty;\n    done(err);\n});",
                  "err": {},
                  "uuid": "167b305e-4ffb-447f-b605-cd7f2865e066",
                  "parentUUID": "1e219cb9-37ed-4d32-a1cd-4812b9f1bc33",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "GET /users/:id",
                  "fullTitle": "User API Tests GET GET /users/:id",
                  "timedOut": false,
                  "duration": 414,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.get(`users/${userID}?access-token=${TOKEN}`).end((err, res) => {\n    if (err) done(err);\n    expect(res.body.id).to.equal(userID);\n    done();\n});",
                  "err": {},
                  "uuid": "9ec3dd82-b5f5-4146-af51-0e88f2717624",
                  "parentUUID": "1e219cb9-37ed-4d32-a1cd-4812b9f1bc33",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "GET /users/:name",
                  "fullTitle": "User API Tests GET GET /users/:name",
                  "timedOut": false,
                  "duration": 491,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.get(`users/${userID}?access-token=${TOKEN}`).end((err, res) => {\n    if (err) done(err);\n    expect(res.body.name).to.equal(\"Sanjay Y M\");\n    done();\n});",
                  "err": {},
                  "uuid": "7c374795-8c50-4f3a-a991-55e64cb67673",
                  "parentUUID": "1e219cb9-37ed-4d32-a1cd-4812b9f1bc33",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "GET users with query param",
                  "fullTitle": "User API Tests GET GET users with query param",
                  "timedOut": false,
                  "duration": 497,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const url = `users?access-token=${TOKEN}&gender=male&status=active`;\nrequest.get(url).end((err, res) => {\n    if (err) done(err);\n    // Assuming the API returns an array of users matching the criteria\n    // You might want to check if any of the returned users match your criteria\n    // For demonstration, let's simply check if the array is not empty\n    expect(res.body).to.be.an('array').that.is.not.empty;\n    res.body.forEach(element => {\n        expect(element.gender).to.eq('male');\n        expect(element.status).to.eq('active');\n    });\n    // If you were looking for a specific user, you'd need to filter `res.body` and find that user, then do your assertion\n    done();\n});",
                  "err": {},
                  "uuid": "0f1904a6-05e6-4eee-9ef7-a34cee17f4bd",
                  "parentUUID": "1e219cb9-37ed-4d32-a1cd-4812b9f1bc33",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "167b305e-4ffb-447f-b605-cd7f2865e066",
                "9ec3dd82-b5f5-4146-af51-0e88f2717624",
                "7c374795-8c50-4f3a-a991-55e64cb67673",
                "0f1904a6-05e6-4eee-9ef7-a34cee17f4bd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1837,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "f563d966-1d12-40de-8f4e-9003254475d1",
              "title": "UPDATE",
              "fullFile": "C:\\Users\\Administrator\\Documents\\super-api-test\\test\\smoke\\users.js",
              "file": "\\test\\smoke\\users.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "PUT /users/:id :: To update existing user",
                  "fullTitle": "User API Tests UPDATE PUT /users/:id :: To update existing user",
                  "timedOut": false,
                  "duration": 452,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n    \"name\": \"Anvitha Ram Kumar Verma\",\n    \"email\": `anvitha.ram.kumar.verma-${Math.floor(Math.random() * 9999)}@farrell.test`,\n    \"gender\": \"female\",\n    \"status\": \"inactive\"\n};\nreturn request\n    .put(`users/${userID}`)\n    .set(\"Authorization\", `Bearer ${TOKEN}`)\n    .send(data)\n    .then((res) => {\n        //console.log(res.body);\n        expect(res.body).to.deep.include(data);\n    });",
                  "err": {},
                  "uuid": "5baa2fc6-c834-45b4-adbe-2bebca2d82f9",
                  "parentUUID": "f563d966-1d12-40de-8f4e-9003254475d1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5baa2fc6-c834-45b4-adbe-2bebca2d82f9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 452,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "3832f7bd-f09e-46b4-ac59-17f1388bc640",
              "title": "DELETE",
              "fullFile": "C:\\Users\\Administrator\\Documents\\super-api-test\\test\\smoke\\users.js",
              "file": "\\test\\smoke\\users.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "DELETE /users/:id :: Delete existing user",
                  "fullTitle": "User API Tests DELETE DELETE /users/:id :: Delete existing user",
                  "timedOut": false,
                  "duration": 330,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return request\n    .delete(`users/${userID}`)\n    .set(\"Authorization\", `Bearer ${TOKEN}`)\n    .then((res) => {\n        console.log(res.body);\n        expect(res.body).to.be.empty;\n    })",
                  "err": {},
                  "uuid": "f617f5f7-1ddf-41e8-b976-84e36aabd88c",
                  "parentUUID": "3832f7bd-f09e-46b4-ac59-17f1388bc640",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f617f5f7-1ddf-41e8-b976-84e36aabd88c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 330,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "2bfbc18f-9a13-452a-9f70-db28ccff7617",
              "title": "User API Functionality Test",
              "fullFile": "C:\\Users\\Administrator\\Documents\\super-api-test\\test\\smoke\\users.js",
              "file": "\\test\\smoke\\users.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should fetch all users",
                  "fullTitle": "User API Tests User API Functionality Test should fetch all users",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(users).to.be.an('array');\nexpect(users.length).to.be.greaterThan(0);",
                  "err": {},
                  "uuid": "5f047605-e2cc-45aa-a376-2c6320f4514c",
                  "parentUUID": "2bfbc18f-9a13-452a-9f70-db28ccff7617",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have users with necessary properties",
                  "fullTitle": "User API Tests User API Functionality Test should have users with necessary properties",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "users.forEach(user => {\n    expect(user).to.include.keys('id', 'name', 'email', 'gender', 'status');\n});",
                  "err": {},
                  "uuid": "70a92d46-d8e3-435d-a4ed-49925197c5c3",
                  "parentUUID": "2bfbc18f-9a13-452a-9f70-db28ccff7617",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should filter users by gender - female",
                  "fullTitle": "User API Tests User API Functionality Test should filter users by gender - female",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const females = users.filter(user => user.gender === 'female');\nexpect(females.length).to.be.greaterThan(0);\nfemales.forEach(female => {\n    expect(female.gender).to.equal('female');\n});",
                  "err": {
                    "message": "AssertionError: expected +0 to be above +0",
                    "estack": "AssertionError: expected +0 to be above +0\n    at Context.<anonymous> (file:///C:/Users/Administrator/Documents/super-api-test/test/smoke/users.js:148:42)\n    at process.processImmediate (node:internal/timers:476:21)",
                    "diff": ""
                  },
                  "uuid": "2c2e60fa-3a86-4cda-b0f5-51d96bd1a67a",
                  "parentUUID": "2bfbc18f-9a13-452a-9f70-db28ccff7617",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should filter users by status - inactive",
                  "fullTitle": "User API Tests User API Functionality Test should filter users by status - inactive",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const inactiveUsers = users.filter(user => user.status === 'inactive');\nexpect(inactiveUsers.length).to.be.greaterThan(0);\ninactiveUsers.forEach(user => {\n    expect(user.status).to.equal('inactive');\n});",
                  "err": {
                    "message": "AssertionError: expected +0 to be above +0",
                    "estack": "AssertionError: expected +0 to be above +0\n    at Context.<anonymous> (file:///C:/Users/Administrator/Documents/super-api-test/test/smoke/users.js:156:48)\n    at process.processImmediate (node:internal/timers:476:21)",
                    "diff": ""
                  },
                  "uuid": "df04787c-f248-4ada-a12c-c379531347ea",
                  "parentUUID": "2bfbc18f-9a13-452a-9f70-db28ccff7617",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5f047605-e2cc-45aa-a376-2c6320f4514c",
                "70a92d46-d8e3-435d-a4ed-49925197c5c3"
              ],
              "failures": [
                "2c2e60fa-3a86-4cda-b0f5-51d96bd1a67a",
                "df04787c-f248-4ada-a12c-c379531347ea"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}